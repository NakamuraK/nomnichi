第10回 乃村研勉強会 議事録

日時：          平成21年10月3日(土) 9:00 〜 17:50
場所：          工学部4号館104号室
参加者(敬称略)：乃村研究室 乃村，栗原，牛尾，香西，藤原(啓)，須賀院，
                           中原，長田，三原，諸冨
                外部       岸，粟田，片岡，千崎



1．議事内容
 (1) スライド発表
  (A) Preface
   (a) P.4において，
     (i) 「するよる」となっている箇所があるが，「するより」である．
    (ii) 「レポジトリ」ではなく，「リポジトリ」である．

  (B) CHAPTER1 Introduction
   (a) P.7の「不変性」の意味は，データの内容が変わらないことではない．
       コミットをした時そのコミット固有のハッシュ値が付き，その値を変
       更することは不可能ということである．
   (b) P.9の“the information manager from hell”のhellは，Linusの出身
       であるフィンランド，ヘルシンキ(Helsinki)のことと思われる．
   (c) P.10のLinuxの名前を決める際に自身の名前を付けるよう友人に強要さ
       れたというエピソードは参考文献に記述されている．

  (C) CHAPTER3 Getting Started
   (a) 議論なし．

  (D) CHAPTER4 Basic Git Concepts
   (a) P.23の<特徴>において，ハッシュ値はランダムであるため「別の内容
       から同じハッシュ値が生成されることは『滅多に』ない」が正しい．
   (b) P.24において，
      (i) Gitは全てのファイルの状態を保持している．これに対し，CVS,
          Subversionは最新のファイルとそれに対するdiffの積み重ねとして
          管理している．そのため，Gitは簡単にリビジョン間のdiffが取れ
          る．よって，ハッシュ値の変化をblobの1組の変化として歴史を計
          算」ではなく，一連のblobのハッシュ値の変化として歴史を計算」
          というのが正しい．
     (ii) 原文“set”の意味は「1組」ではなく「集合」という意味である．
    (iii) マージする際，Subversionではどちらかをベースにしてマージする
          ため，ブランチA,BにおいてAにBをマージしたものとBにAをマージ
          したものは異なるものとなる．これに対し，Gitはベースの概念が
          なく，マージする際は「AとBをマージする」という表現になる．
   (c) P.25のFigure4-1において，灰色の箱は1つのファイルであり，1つのツ
       リーがディレクトリとなる．
   (d) P.26において，
      (i) commit，treeは同じサブディレクトリが変化していなかった場合，
          そのtreeを指して終わりである．
     (ii) commitが親のcommitを指す理由は，1つ1つのblobがハッシュ値，ツ
          リーを持つからである．ツリーも同じなら，そのツリー下にあるフ
          ァイルのハッシュ値も同じである．
    (iii) 親コミットとは，あるコミットの派生元のコミットのことである．
          このため，親コミットは複数ある場合もある．

  (E) CHAPTER5 File Management and Index
   (a) git commitコマンドで引数にファイルを指定した場合，引数として指
       定されたファイルのみコミットする．
   (b) git add data後にdataを編集した場合は，再度git add dataを行わな
       ければステージされない．
   (c) git commit --allコマンドは，インデックスにある変化とunstagedの
       ファイルをコミットする．
   (d) git rmコマンド後にコミットすることにより，削除内容がリポジトリ
       に反映される．このとき，削除するのは，treeオブジェクトからの矢
       印であり，blobは削除されない．
   (e) git mvを使用する場合とmvを使う場合の動作が等価になる理由は，git
       はファイル管理にハッシュ値を利用しているためである．
   (f) インデックスは，ファイルの差分ではなく，ファイルそのものを管理
       する．
   (g) インデックスは，ワーキングコピーとリポジトリに差異がない場合，
       同じツリーを指す．
   (h) git commit後の図は間違っている．正しくは，オブジェクトストアの
       最新コミットのツリーはbarとquuxを指す．

  (F) CHAPTER6 Commits
   (a) p.55とp.74の出力例の中に'_'であるはずの文字が'J'になっている部
       分がある．PDFからコピーするとこのような現象が起きることがある．
   (b) p.57の"確定的な操作"は"certain operations"の訳であるが，この場
       合は"特定の操作"と訳すべきである．
   (c) p.57の「くわしく」が平仮名になっている．漢字で書くべきである．
   (d) '^'の読み方はキャレットであり，'~'の読み方はチルダである．
   (e) p.66に"objet"という記述があるが，正しくは"object"である．
   (f) p.75のgit blameコマンドの-Lオプションは更新履歴を参照する範囲を
       指定する．"git blame -L 35 , init/version.c"と実行することで，3
       5行目以降の更新履歴を参照することが出来る．また，"git blame -L 
       35 ,100 init/version.c"とすることで，35行目から100行目の更新履
       歴を参照することが出来る．

  (G) CHAPTER7 Branches
   (a) 30，40人ほどの実際の開発現場では，バージョン管理にSubvertionを
       使用して，ブランチは使用しない場合もある．この場合でも，変更す
       る箇所が担当毎に分かれているので，競合はほとんど発生しない．
   (b) Gitにおいてのブランチとは，ブランチ名が示すコミットオブジェクト
       に繋がった一連のオブジェクト群である．
   (c) p.93においてチェックアウト後のメッセージが「Switched to branch"
       bug/pr-l"」となっているが，間違いである．正しくは，「Switched t
       o branch "testing"」である．
   (d) Newの環境では，ブランチを切り替える際，自動的に未コミットの内容
       がマージする．しかし，参考文献には-mを指定しないとマージされな
       いと記述されている．後で，調査する必要がある．
   (e) p.97において，ブランチ一覧のアスタリスクの位置が間違っている.正
       しくは，masterにはアスタリスクはない．

  (H) CHAPTER8 Diffs
   (a) 特になし．

  (I) CHAPTER9 Merges
   (a) 実行例には，等幅フォントを使用するべきである．
   (b) p.117，118において，内容の図をのせるべきである．
   (c) git mergeコマンドによりコンフリクトが発生した際に，コンフリクト
       していないファイルがどのようになるかは，未確認である．
   (d) p.130において，記述されているマージが図と対応していない．
   (e) p.131において，図と説明文が対応していない．
   (f) Fast-forwardとは，現在のブランチがmarge対象のブランチのすべての
       コミットオブジェクトを含んでいる状態である．
   (g) p.132において，示している図は，リカーシブの例ではなく，クリスク
       ロスの例である．リカーシブは，図のようなクリスクロスを解決する
       ために有効な手段である．
   (h) p.137において，マージベース，編集のファイル，マージ元のファイル
       が記述されているようにインデックスに作成されるかは未確認である．
   (i) p.139において，コンフリクトを解消する為にaddを行い，後にそのフ
       ァイルをunstageにする．この時にどうなるかは未確認である．
   (j) p.141において，git reset --hardとは，指定したコミットオブジェク
      トにHEADを移動させ，インデックスとワーキングディレクトリの状態を
      指定したコミットオブジェクトの状態に切り替えるコマンドである．
   (k) Gitは，コミットオブジェクト間の関係を容易に変更できる．このため，
       commit graphを表示させるツールがあれば便利である．
   (l) スカッシュコミットを行うと，行ったブランチの履歴が失われるが，
       履歴が単純で見やすくなる．

  (J) CHAPTER10 Altering Commits
   (a) resetコマンドの説明として“直前のコミットを取り消す”という表現
       は適切でない．resetの機能はHEADコミットの変更である．
   (b) p.151の“--sort”は“--soft”の誤りである．
   (c) cherry-pickは実行するたびにコミットが発生する．
   (d) cherry-pickはマージではない．参考文献ではmergeではなくintroduce
       と記述されている．
   (e) revertコマンドを実行すると，状態Dに戻るコミットが発生する．
   (f) p.157の例がわかりにくい．図を用いて説明する．
   (g) rebaseは，別の開発を追いかける形でパッチを開発しているとき，常
       に最新コミットに対しパッチを当てたい場合に使用する．
   (h) rebase -iは，すでに存在するコミットの順番を入れ替えてコミットし
       直す操作である．このため，コミットオブジェクト自体が変更される．

  (K) CHAPTER11 Remote Repositories
   (a) 以下の内容についてスライドに加筆，修正を行うこと．
      (i) p.163にオリジナルブランチと表記されているが，正しくはオリジ
          ナルリポジトリに修正する．
     (ii) p.164のgit merge [tracking] の説明がトラッキングブランチ
          trackingにマージとなっているが，これは間違いである．正しくは，
          トラッキングブランチからtrackingにマージである．
    (iii) p.165に初期リポジトリに作成とあるが正しくは，初期リポジトリ
          から作成である．
     (iv) p.169(1)の内容は，「オリジナルリポジトリに存在するコミットは
          全てクローン内に存在する」と修正する．また，(2)の内容を「オ
          リジナルリポジトリからの」となっているが，正しくは，「オリジ
          ナルリポジトリの」である．
      (v) p.170に先に行ったプッシュがその順で記録されるわけではない」
          とある．これは，コミット履歴は，時間軸で記録されているわけで
          はないという前提がある．しかし，スライド内でその説明がされて
          いないため，意味が分からない．文を修正するか，説明を追加する．
     (vi) p.173のrefspecについて，詳細が記載されていないため加筆する．
   (b) いくつかのコマンドが記載されていないため，一連の処理が把握でき
       ない．
       例：p.165
         $ ls -aF .gitとあるが，直前のコマンド
         $ cd ~/public_html/が抜けている．
         これでは，どういった処理を行っているか把握できない．
   (c) いくつかの前提条件や用語の説明，および図が不足しているため，処
       理内容が分かりにくい．説明を追加し，処理が分かるよう記述する．
       例：(b)の例は，ベアリポジトリが作業ディレクトリを持たないことを
           lsコマンドで確認している．しかし，説明が不足しているため，
           何を示しているのか分からない．

  (L) CHAPTER12 Repository Management
   (a) p.179において，“commit”の記述が間違っている．
   (b) p.183において，
     (i) ブランチの管理者がブランチを作成する．
    (ii) 管理者が行うこと(1),(2),(3)...，開発者が行うこと(1),(2),(3)...
         という様に箇条書きで記述する．
   (c) p.184において，「current開発者がブランチを切る」のではなく，「c
       urrent管理者がブランチを切る」のである．
   (d) p.186において，「プロジェクトにおいて，必要なこと」ではなく，「
       プロジェクトに参加するのに必要なこと」の方が正しい．
   (e) p.187において，コピー元，コピー先のリポジトリに厳密な関係はない
       が，この関係は開発者間で決め，プロジェクト間でリポジトリ構成を
       決定する．
   (f) P.191において，「プトジェクト」ではなく「プロジェクト」である．

  (M) CHAPTER13 Patches
   (a) P.198での，注意と例の表示位置がおかしい．正しくはP.199の注意と
       例である．
   (b) P.205での，"git diff やUNIXのdiffコマンドで作られた"はおかしい．
       正しくは"git diff やUNIXのdiffコマンドの出力形式で作られた"であ
       る．
   (c) "Bad Paches"と"Patching Versus Merging"に対応するスライドがない．

  (N) CHAPTER14 Hooks
   (a) P.205のpre-commit のソースコードがおかしい．以下の箇所を修正す
       る．
     (i) ソースコード上部が切れて表示されている．
    (ii) ソースコード中の"#"が別の文字に変化している．
   (b) Hookの利用例がよくわからない．具体的な使用例を示す．

  (O) CHAPTER15 Combining Projects
   (a) スライド210ページのメリットとデメリットとあるが，何のメリットと
       デメリットなのか分からない．スライドタイトルのメリットであるこ
       とを明示する．
   (b) p.212のスライドの題目番号の振り方が間違っている．(3)→(4)に修正
       する．
   (c) サブツリーマージについての説明がない．Git本142ページによるとサ
       ブツリーマージとは，サブツリーをルートとしてマウントし，マージ
       することである．
   (d) 方法の説明にコマンド例がないため，具体的なイメージができない．
       コマンド例を載せる．


 (2) 議論
  (A) スライドについて
    (a) スライドでは，自分の分かっている事を他人に伝えるための説明を書
        くようにする．勉強会とは自分の分かっていることを一つでも多く伝
        えることができる機会である.
    (b) ソースコードの例を示すのならば，コードの意味を理解しておく．
  (B) 研究グループでのGitの使い方について
    (a) Gitのリポジトリを見ると，管理者が定期的にメインのブランチにマ
        ージしているのが分かる．
    (b) ツリーを無理に線形化する必要はない．研究グループで開発を行う際，
        各人毎にブランチを切り，適当な期間ごとに管理者がオクトパスマー
        ジを行えば良い．
