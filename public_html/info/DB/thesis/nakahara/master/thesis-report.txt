◆発 表 日: 平成24年 2月16日(木)
◆発表会場: 工学部4号館 11番講義室
◆発表題目: Mintオペレーティングシステムにおける高速で柔軟な起動方式に
            関する研究
◆発 表 者: 中原 大貴
◆概    要:
  計算機のハードウェアは高性能化が進んでおり，1つのチップに数百個のコ
アの搭載されたメニーコアプロセッサが登場している．この際にOSの観点から
は，メニーコアを効率的に使用する方法が課題になる．そこで，メニーコアを
効率的に扱う手段として，1台の計算機上で複数のOSを動作させることが考え
られる．
  1台の計算機上で複数のOSを動作させる手法の1つとして，仮想計算機方式が
ある．仮想計算機方式は，仮想マシンモニタにより，実計算機を複数の仮想的
な計算機に見せかけ，この上でOSをそれぞれ独立して走行させられる．しかし，
仮想計算機方式は，デバイスの仮想化によるオーバヘッドが発生するほか，仮
想計算機と仮想マシンモニタに依存性があり，実計算機と同等の性能では動作
しない．
  一方，Mintオペレーティングシステムは，仮想化によらずに1台の計算機上
で複数のLinuxを独立に同時走行させるため，仮想化によるオーバヘッドの問
題を解決できる．そして，OS間通信を利用し，役割の異なる複数のカーネルを
連携させて走行させることを目指している．
  本論文では，メニーコアの効率的な利用を考慮し，Mintにおける高速で柔軟
な起動方式に関する研究について述べる．まず，Kexecを応用した起動方式を
実現した．Kexecとは，Linuxの高速な再起動方式である．これにより，カーネ
ルを配置する実メモリ領域を起動時に自由に変更可能となり，柔軟な起動を実
現できる．また，多数のOSの起動に要する時間を短縮するため，起動処理を並
列化した．さらに，役割の異なる複数のカーネルの連携例として32/64bitカー
ネルの混載を実現した．そして，評価により，Kexecを応用することによって
後続OSの起動処理に要する時間は，BIOSとブートローダを介するLinuxの起動
処理と比較して約21.1s短縮可能であることを示した．また，2つの後続OSを並
列起動する場合，逐次起動の約55%の時間で起動可能であることを示した．

◆質疑応答(敬称略)◆
Q1: 柔軟なという言葉は具体的に何を表すのか．                    (谷口)
A1: 単一のカーネルイメージから複数のOSを起動可能になるということを柔軟
    と言っている．

Q2: その対処は単にリロケータブルなOSのモジュールを使ったということか．
                                                                (同上)
A2: Kexecを用いてリロケータブルなOSを任意のメモリ領域に配置するという
    対処である．

Q3: 柔軟という言葉は，様々な取り方があると思うが，柔軟という言葉は単一
    のカーネルイメージから複数のOSを起動可能になるということだけを意味
    しているのか．                                              (同上)
A3: それだけではなく，例えば，プロテクトモードへの切り替え処理といった
    走行モードの切り替えをpurgatoryの中に局所化するという対処により，
    例えば64bitへの対応においても走行モードの違いをpurgatoryで吸収する
    ことができ，柔軟な起動を実現できることを意味する．

Q4: 並列起動の高速化において2つのOSの並列起動しか評価していないが，メ
    ニーコアを考慮して10個程度のOSを並列起動する場合の起動時間はどうな
    るか．                                                      (同上)
A4: 単独起動の場合と2つのOSの並列起動の場合の差が2秒であり．この2秒の
    差が増えていくことになる．

Q5: そうなるとは考えにくい．多数のOSで排他制御部分の処理が重なることに
    よって2秒以上待つことになるのではないか．                   (同上)
A5: 先行OS側の処理は逐次実行しており，この部分を含めて待つ時間は毎回2
    秒程度となる．

Q6: 100個のOSを起動する場合は待ち時間は100×2秒となるのか．     (同上)
A6: その通りである．

Q7: この並列起動はメニーコアにおいて何コアまで対応できると考えているか．
                                                                (同上)
A7: 100コアでも対応できると考えている．

Q8: Mintのメモリ分割について，各OSからはどのようなアドレスに見えるのか．
                                                              (名古屋)
A8: 実メモリの空間分割については，BIOSから与えられるメモリマップという
    メモリの使用可否についての情報を書き換えることによって実現している．
    各OSから見ると，それぞれ自身が占有する領域だけが使用可能で，残りは
    使用不可能に見える．

A9: 例えばVMだとVMモニタがアドレス変換をし，各ゲストOSはあたかも実アド
    レスを使用しているように見える．Mintではそのようなことはしていない
    のか．各OSからは0番地からではなく，特定の高い番地から使用するのか．
                                                                (同上)
Q9: その通りである．図の例では，後続OSは高い番地，例えば先頭から128MB
    のメモリ領域を利用する．

Q10: そこでリロケータブルなカーネルを使うとカーネルイメージの単一化を
     実現できるということか．                                   (同上)
A10: その通りである．

◆反省と感想◆
(1) 中間発表での反省点を生かせたと思う．

(2) Q3からQ7の質疑に関して，自分の考えをもっとはっきりと主張するべきで
    あった．

(3) 聴講者よりもスクリーンを見ている時間が長かった．