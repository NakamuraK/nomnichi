◆発表日   : 2011年2月18日(金)
◆発表会場 : 岡山大学 工学部4号館 第11番講義室
◆発表題目 : IMS/XDMSの高度利用を実現するソフトウェアライブラリに関
             する検討
◆発表者   : 長尾 武憲
◆概要:
　次世代ネットワークであるNext Generation Network(NGN) において，IP M-
ultimedia Subsystem(IMS)は，高品質で高信頼のマルチメディア通信を提供
するための仕組みを規定している．IMS は，設定情報の保存にXML Document
Management Server(XDMS)を提供している．XDMSが扱う設定情報として，携帯
電話の通信記録やInstant Messaging のコンタクトリストがある．XDMS内の
XML文書の追加，更新，及び削除には，XML Configuration Access Protocol
(XCAP)と呼ばれるHTTP ベースのプロトコルが使用される．XCAP はリソースの
指定にURI を用いる．また，操作にはGET，PUT，及びDELETEの3つのHTTPメソ
ッドを文書の取得，更新，及び削除と対応付けて用いる．
　増大するネットワークのトラフィックに伴って，高品質，高信頼な大容量の
データ通信に対する需要は高まっている．このため，今後NGN が普及していき，
XDMSの利用も増加すると考えられる．そこで，XDMS には「XDMSへ複雑な操作
を行うシステムを容易に実装したい」という要求が生まれると考えられる．こ
の要求を満たすためには，以下の2 つが問題となる．1つ目は，XDMSには，自
身が保持する文書の一覧を取得する機能がないという点である．このため，多
数の文書を扱うようなシステムを構築しづらい．2つ目は，XCAPは単純な問い
合わせしかできない点である．このため，整列といった複雑な処理の実現には，
XDMSを利用するApplication Server(AS)側での処理が不可欠である．
　本論文では，XDMSとIMS の概要を述べ，XDMSの操作インタフェースである
XCAPについて述べた．文書の一覧が取得できない問題の対処として，既に提案
されているインデックスを導入し，文書の一覧を取得する方式を実装した．複
雑な操作の実装にはAS 側での処理が不可欠である問題の対処として，ライブ
ラリの導入により，XDMS を利用したAS の工数を削減する方法を提案した．イ
ンデックスをAS 内に実装するのではなく，ライブラリ内に隠ぺいすることで，
ASがインデックスの動作を意識せずに処理できるようにした．さらに，ライブ
ラリを実装し，その動作概要についても述べた．


◆質疑応答:(質問者(敬称略))
Q1: インデックスは，ライブラリ内に保持する方式とXDMS内に保持して要求の
    度に呼び出す方式がある．今回実装したのはどちらの方式か．    (渡邊)
A1: XDMS内に保持して要求の度に呼び出す方式である．

Q2: 要求の度にインデックスを呼び出す方式だと，データ量が膨大になると思
    われるが，それは問題とならないのか．                        (同上)
A2: 確かに，データ量は膨大になる．しかし，ディレクトリ構造を組み込むこ
    とを考えると，XDMS内にインデックスを置く方が良いと思われる．

Q3: ライブラリとは具体的にはどんなものか．                      (阿部)
A3: アプリケーションの中に組み込んで使用してもらう．

Q4: ライブラリのできることは何か．                              (同上)
A4: 文書の取得，新規作成，更新，削除である．

Q5: 「IMS/XDMSの高度利用」の高度利用とは何か．                  (谷口)
A5: ライブラリを挿入することでRuby On Rails(以下，Rails)の豊富なAPIを
    使用可能になる．このため，開発者がXDMSを利用したアプリケーションに
    複雑な処理を実装可能になる．これを高度利用と表現した．

Q6: ライブラリは文書の取得，新規作成，更新，削除しかできないのに高度利
    用と言えるのか．                                            (阿部)
A6: その他にも，Railsは豊富なAPIを用意しており，開発者はそれを利用可能
    である．

Q7: 実装したライブラリとRailsとの関係はどうなっているのか．     (乃村)
A7: RailsのActiveResource機能に元々存在しているメソッドを改変し，イン
    デックスを含むライブラリを実装した．

◆反省:
(1) WebフレームワークであるRailsの説明が足りなかった．このため，聴講者
    に実装の内容が正しく伝わらなかった．今後は，聴講者の知識に合わせて，
    資料を作成する．
(2) 「えー」や「その」といった繋ぎの言葉を使う場面が多かった．改善すべ
    きである．
(3) 質問に対し，遠回しな答えをすることが多かった．質問に対する答えは簡
    潔に述べるべきである．