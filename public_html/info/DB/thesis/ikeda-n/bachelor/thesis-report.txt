◆発表日   : 平成24年2月17日(金)
◆発表会場 : 岡山大学工学部4号館11番講義室
◆発表題目 : Mintオペレーティングシステムにおけるコア移譲の管理機能に
             ついて
◆発表者   : 池田 騰
◆概要：
  計算機の高性能化にともない，計算機資源を全て使用することは少なくなっ
てきた．そこで，計算機資源を有効に活用するために，複数のOSを1台の計算
機で動作させる技術として仮想計算機方式が研究されている．しかし，仮想計
算機方式は，計算機の仮想化によるオーバーヘッドのため，実計算機よりも性
能が低下する．また，各OS間での処理負荷の影響が存在する．そこで，性能の
低下を抑えるため，マルチコアプロセッサ上で複数のLinuxを独立に走行させ
る方式としてMintが研究開発されている．
  OSの負荷は一定ではなく，時間とともに変化する．このため，負荷に応じて
計算機資源を動的に割り当てることで計算機資源を効率的に使用できる．一方
で，Mintでは計算機資源を各OSの起動時に静的に割り当てており，計算機資源
を動的に割り当てることができない．そこで，コアの動的割り当てを可能とす
る方法として，Mint におけるコアの動的割り当て機構が提案されている．コ
アの動的割り当て機構を用いることで，静的に設定されている演算用のコアを
指定して取り外しと取り付けができる．Mint においてコアの移譲を行う際は，
コアの移譲元のOS でコアの取り外しを行い，コアの移譲先のOS でコアの取り
付けを行う．
  MintではOS 間での計算機資源の管理を行っていない．また，OS がコアの識
別に用いるID がOS 間で統一されていない．このため，コア移譲の際には，ユ
ーザが各OS のコアの占有状況を個別に確認し，コアを識別した上で移譲する
コアを指定する必要がある．そこで，OS間でコアの識別に対する整合性を保ち，
全コアの占有状況を把握することで，ユーザが手動で行っている処理を自動化
したいという要求がある．この要求を満たすために，コア移譲の管理機能を実
現する必要がある．
  本論文では，コア移譲の管理機能の実現について述べた．まず，Mint にお
けるコア移譲について述べ，要求を述べた．次に，要求を実現するための課題
を明確にした．そして，課題への対処方法について検討し，コア移譲の管理機
能の実現について述べた．

◆質疑応答：(質問者(敬称略))
Q1: 改変したコード量はいくらか？                              (名古屋)
A1: 追加したコード量は170行程度で，改変したコード量は20行程度である．

Q2: どのようにコア移譲を行うのか？                              (谷口)
A2: まず，移譲元のOSで必要のないコアの解放を行い，コア管理部に占有可能
    なコアとして登録する．次に，移譲先のOSでコア管理部から占有可能なコ
    アを参照し，コアの占有を行う．

Q3: 移譲元のOSがコアを解放しないとコアの移譲ができないのか？    (同上)
A3: はい．移譲元のOSと移譲先のOSで通信などを行っていないため，コアの必
    要ないOSがコアの解放を行い，コアを必要とするOSがコアの占有を行うこ
    とになる．

Q4: 実際の負荷分散では，それぞれのOSがなかなかコアの取り外しを行わない
    ため，コアの移譲契機に工夫が必要なのではないか？            (同上)
A4: 今後の課題として検討する．

Q5: シャットダウンしたOSのコアを移譲して使用することは可能か？  (渡邊)
A5: 可能である．シャットダウンの際に解放コアについてコア管理部の情報を
    更新することで，他のOSに移譲可能となる．

Q6: 再起動したOSにコアを移譲することは可能か？                  (同上)
A6: 可能である．Mintでは再起動の際には起動しているOSからBSPを指定して
    起動を行う．再起動後のOSにコアを移譲することは可能である．

◆反省と感想：
(1) 時間内に発表を終えることができた．
(2) 発表の初めの方を早口で説明してしまった．これに伴い説明で噛んでしま
    った部分が多くあった．
(3) 文章を見て発表していた部分が多くあった．もっと前を向いて発表するべ
    きであった．
(4) 簡潔に答えられる質問に冗長に答えてしまっていた．質問の意図を正しく
    理解し，分かりやすく伝えるべきであった．
